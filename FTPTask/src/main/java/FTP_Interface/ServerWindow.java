/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package FTP_Interface;

//import static FTP_Server.TextServer.listFiles;
import static FTP_Client.TextClient.dataPortClient;
import static FTP_Client.TextClient.output;
import static FTP_Server.TextServer.listFiles;
import java.awt.Color;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author jojoj
 */
public class ServerWindow extends javax.swing.JFrame {

    /**
     * Creates new form ServerWindow
     */
    public ServerWindow() {
        initComponents();
        this.setLocationRelativeTo(null);
        setBackground(new Color(0.0f, 0.0f, 0.0f, 0.0f));
        ArrayList<String> listFil = listFiles();
        String text = "<html>";
        for (String s : listFil) {

            text = text + s + "<br/>";

        }
        text = text + "</html>";
        ServerInfo.setText(text);
        pp.setVisible(false);

        // condcion = true;
        //System.out.println(listFiles());
    }

    public static boolean condcion = true;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pp = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        cdButton = new javax.swing.JButton();
        ServerInfo = new javax.swing.JLabel();
        pathText = new javax.swing.JTextField();
        backButton = new javax.swing.JButton();
        mainLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);
        setUndecorated(true);
        setOpacity(0.0F);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        pp.setViewportView(jList1);

        getContentPane().add(pp, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 170, -1, -1));

        cdButton.setBorder(null);
        cdButton.setBorderPainted(false);
        cdButton.setContentAreaFilled(false);
        cdButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cdButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cdButtonMouseClicked(evt);
            }
        });
        getContentPane().add(cdButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(353, 90, 40, 30));
        getContentPane().add(ServerInfo, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 150, 220, 230));

        pathText.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        pathText.setBorder(null);
        getContentPane().add(pathText, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 90, 140, 30));

        backButton.setBorder(null);
        backButton.setContentAreaFilled(false);
        backButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        backButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backButtonMouseClicked(evt);
            }
        });
        getContentPane().add(backButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 410, 90, 40));

        mainLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FTP_Images/panel servidor.png"))); // NOI18N
        getContentPane().add(mainLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 900, 550));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        for (double i = 0.0; i <= 1.0; i = i + 0.1) {

            String val = i + "";
            float f = Float.valueOf(val);
            this.setOpacity(f);
            try {

                Thread.sleep(50);
            } catch (Exception e) {
            }

        }

    }//GEN-LAST:event_formWindowOpened

    private void backButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backButtonMouseClicked
        // TODO add your handling code here:
 String dataTCP = "";
        String currentDirectory = "files\\";
        String cd = pathText.getText();

        if (cd.isEmpty()) {
            errorWindow error = new errorWindow();
            error.setVisible(true);
        } else {
            try {

                BufferedReader input = new BufferedReader(new InputStreamReader(main.connection.getInputStream()));
                PrintWriter output = new PrintWriter(main.connection.getOutputStream(), true);
                String s = "cd .." ;
                if (s.startsWith("cd")) {
                    String[] command = s.split(" ");
                    if (command.length == 2) {
                        dataTCP = "CWD" + " " + command[1]; 					// CWD <SP> <pathname> <CRLF>
                        output.println(dataTCP);
                        System.out.println(dataTCP);
                        String directory = input.readLine();

                        if (!directory.isEmpty()) {
                            currentDirectory = directory;
                        } else {
                            System.out.println("ERROR: Access forbidden outside the \"files\\\" folder!");
                        }
                        try {
                            String response = input.readLine();
                            System.out.println(response);
                            if (response.startsWith("CWD")) {
                            SuccessWindow success = new SuccessWindow();
                            success.setVisible(true);
                        } else {
                            errorWindow error = new errorWindow();
                            error.setVisible(true);
                        }
                        } catch (IOException e) {
                            System.out.println(e);
                        }
                    } else {
                        dataTCP = "CWD";
                        output.println(dataTCP);
                        try {
                            String response = input.readLine();
                            System.out.println(response);
                        } catch (IOException e) {
                            System.out.println(e);
                        }
                    }
                    //System.out.println(input.readLine());
                }

            } catch (IOException ex) {
                Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_backButtonMouseClicked

    private void cdButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cdButtonMouseClicked
        // TODO add your handling code here:
        String dataTCP = "";
        String currentDirectory = "files\\";
        String cd = pathText.getText();

        if (cd.isEmpty()) {
            errorWindow error = new errorWindow();
            error.setVisible(true);
        } else {
            try {

                BufferedReader input = new BufferedReader(new InputStreamReader(main.connection.getInputStream()));
                PrintWriter output = new PrintWriter(main.connection.getOutputStream(), true);
                String s = "cd " + pathText.getText();
                if (s.startsWith("cd")) {
                    String[] command = s.split(" ");
                    if (command.length == 2) {
                        dataTCP = "CWD" + " " + command[1]; 					// CWD <SP> <pathname> <CRLF>
                        output.println(dataTCP);
                        System.out.println(dataTCP);
                        String directory = input.readLine();

                        if (!directory.isEmpty()) {
                            currentDirectory = directory;
                        } else {
                            System.out.println("ERROR: Access forbidden outside the \"files\\\" folder!");
                        }
                        try {
                            String response = input.readLine();
                            System.out.println(response);
                            if (response.startsWith("CWD")) {
                            SuccessWindow success = new SuccessWindow();
                            success.setVisible(true);
                        } else {
                            errorWindow error = new errorWindow();
                            error.setVisible(true);
                        }
                        } catch (IOException e) {
                            System.out.println(e);
                        }
                    } else {
                        dataTCP = "CWD";
                        output.println(dataTCP);
                        try {
                            String response = input.readLine();
                            System.out.println(response);
                        } catch (IOException e) {
                            System.out.println(e);
                        }
                    }
                    //System.out.println(input.readLine());
                }

            } catch (IOException ex) {
                Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_cdButtonMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServerWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServerWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServerWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ServerWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JLabel ServerInfo;
    private javax.swing.JButton backButton;
    private javax.swing.JButton cdButton;
    private javax.swing.JList<String> jList1;
    private javax.swing.JLabel mainLabel;
    private javax.swing.JTextField pathText;
    private javax.swing.JScrollPane pp;
    // End of variables declaration//GEN-END:variables
}
